{"pageProps":{"data":{"category":null,"content":"### 介绍\n\nMobx-state-tree（简称MST）是基于mobx的响应式状态管理工具，核心思想就是一个动态树，每个树由一个结构和一个状态组成，支持状态的序列化、反序列化、时间旅行等功能。\n\n### 使用\n```js\nnpm install mobx mobx-state-tree --save\n```\n或\n```js\nyarn add mobx mobx-state-tree\n```\n\n### types\n如下是一个后端对象结构描述，前端怎么保证数据类型的一致性。或者是修改时过程中数据类型不会发生变化\n\n```go\ntype Article struct {\n\tID         string `json:\"id\"`        // 文章ID\n\tName       string `json:\"name\"`      // 文章名称\n\tCreateTime int64  `json:\"createTime` // 创建时间\n\tIsDeleted  bool   `json:\"isDeleted\"` // 是否删除\n}\n```\n\nMST提供了一个类型校验机制，通过设置类型就可以定义整个状态的树形结构。在开发的时候就可以判断类型是否匹配并提前给出错误提示。\n\nMST提供了一个[types](https://mobx-state-tree.js.org/overview/types) 的对象，其中包含基础类型：\n\n+ string\n+ number\n+ boolean\n+ integer\n+ Date\n\n工厂方法：\n\n+ model\n+ array\n+ map\n+ optional\n\n其中**model**用来创建Model，在model中可以包含多个type，通过type的组合就可以定义出整颗状态树。\n\nModel定义好后，使用Model.create创建实例，传入的第一个参数作为默认值，如果没传将使用optional中设定的值作为默认值；第二个个参数为可选参数（环境配置对象env），通过env实现依赖注入。[demo](https://codesandbox.io/s/thirsty-hill-5fo01d?file=/src/mst.js)\n\n```js\n// 文章model\nconst Article = types\n  .model(\"Article\", {\n    id: types.string,\n    name: types.string,\n    createTime: types.integer,\n    isDeleted: types.optional(types.boolean, false)\n  })\n\t.actions((self) => ({\n    setName: (value) => {\n      self.name = value;\n    }\n  }))\n\n// 文章实例\nconst article = Article.create({\n  id: \"1\",\n  name: \"测试\",\n  createTime: new Date().getTime()\n});\n// 文章列表model\nconst ArticleList = types.model(\"ArticleList\", {\n  list: types.array(Article),\n  current: types.reference(Article)\n});\n```\n\n上面创建了两个model **Article**、**AritcleList**，虽然代码看起来有点繁琐，但是比起将状态放在store中，粒度其实更小了，可以更好的复用。\n\n当通过**setName**方法设置name的值时，不是string类型就回报错\n\n```js\narticle.setName(123)\n```\n\n```\nError\n[mobx-state-tree] Error while converting `123` to `string`:\n\n    value `123` is not assignable to type: `string` (Value is not a string).\n```\n\n设置默认值，使用**optional**可以给字段设置默认值\n\n```js\nconst Article = types\n  .model({\n    id: types.string,\n    name: types.string,\n    createTime: types.integer,\n    isDeleted: types.optional(types.boolean, false)\n  })\n```\n\n\n\n### props\n\nprops指的是Model中定义的属性，定义了model包含哪些字段、以及对应的类型。\n\n```js\nconst Article = types\n  .model(\"Article\", {\n    name: types.string,\n    isDeleted: types.optional(types.boolean, true)\n  })\n```\n\n第一个参数为Model的名称，第二个参数就是props。model的第二个参数可以省略，如下:\n\n```js\nconst Article = types\n  .model(\"Article\")\n  .props({\n    name: types.string,\n    isDeleted: types.optional(types.boolean, true)\n  })\n```\n\n定义好props之后，可以直接访问到对应的字段\n\n```js\nconst article = Article.create({name: \"测试\",});\nconsole.log(article.name);\n```\n\n当数据需要通过计算得到时可以使用Views\n\n\n\n### Views\n\nviews是Model中定义或获取衍生数据的方法的集合，只能获取值不能设置值\n\n```js\nconst Article = types\n  .model(\"Article\", {\n    id: types.string,\n    name: types.string,\n    createTime: types.integer,\n    count: types.optional(types.integer, 1),\n    isDeleted: types.optional(types.boolean, true)\n  })\n.views((self) => ({\n    get formatedName() {\n      return self.name + \"_\" + self.id;\n    },\n\tgetFormatedName() {\n      return self.name + \"_\" + self.id;\n    }    \n  }))\n```\n\n上面使用的是getter的形式获取数据，数据将会被缓存直到依赖的数据发生变化。否则每次都需要通过函数调用的方式来获取数据，无法对计算结果进行缓存，**推荐使用getter的方式，提升性能**。\n\n### Actions\n\nMST在安全模式下不能直接修改属性的值，必须通过action， 否则会报错\n\n```js\nconst Article = types\n  .model(\"Article\", {\n    name: types.string,\n    ))\n  .actions((self) => ({\n    setName: (value) => {\n      self.name = value;\n    },\n  }));\nconst article = Article.create({\n  name: \"测试\"\n})\narticle.setName(\"123\");\n```\n\n可以通过**unprotect**解除安全模式，解除后可能造成代码的不规范。\n\n```js\nunprotect(Article);\narticle.name = \"123\";\n```\n\n\n\n#### [生命周期](https://mobx-state-tree.js.org/overview/hooks)\n\nMST在提供了一些特殊的actions作为生命周期钩子\n\n+ afterCreate: 实例创建成功后\n+ afterAttach：子节点\n+ beforeDetach\n+ beforeDestroy\n+ ....\n\n```js\nconst Article = types\n  .model(\"Article\", {\n    // ....\n  })\n  .actions((self) => ({\n    afterCreate: () => {\n      console.log(self);\n    }\n  }));\n\n```\n\n\n\n### 快照\n\n快照是状态树中特定时间点、固定的、序列化的对像，不包含类型信息，同时不可变。\n\n在数据修改前可以保存数据的原始状态，然后根据快照来恢复状态，可以在表单修改前做一个快照，重置的时候直接从快照获取，避免再次请求后端接口。\n\n常用方法：\n\n+ getSnapshot(model): 返回当前model的快照\n+ applySnapshot(model, snapshot): 使用快照更新model的状态\n+ onSnapshot(model, snapshot): 用来监听是否有新快照可用，自动生成快照。\n\n```js\nimport { getSnapshot, applySnapshot } from \"mobx-state-tree\";\n\nconst Model = types.model(\"Article\", {\n    // ....\n  });\nconst inst = Model.create(...);\n\n// 快照\nlet snapshot = getSnapshot(inst);\n// 恢复\napplySnapshot(model, snapshot);\n\n```\n通过快照可以自动比较变更过的字段，实现数据的增量提交。\n\nPS：snapshot中数据的类型需要跟props定义的类型相同。\n\n### Volatile state\n\n在MST中props定义了状态的类型，数据必须跟状态相匹配，并且数据可以导出为标准的JSON对象。如果无法预知数据的结构或类型，可以使用 **volatile**。\n\n```js\nimport { types } from \"mobx-state-tree\";\nimport { autorun } from \"mobx\";\n\nconst Article = types\n  .model({})\n  .volatile((self) => ({\n    localState: 1\n  }))\n  .actions((self) => ({\n    setX(value) {\n      self.localState = value;\n    }\n  }));\n\nconst article = Article.create();\n\nautorun(() => console.log(article.localState));\n\narticle.setX({\n  name: \"lisi\"\n});\n```\n\n当修改数据的时候**localState**的值被打印出来了，说明**localState**也是**Observable**的。\n\n### 类型校验原理\n\n> MST类型校验的原理概括就是数据要发生改变时校验新值的类型是否匹配，不匹配就报错。\n\n下面以types.integer类型为例，代码如下\n\n```js\nexport const integer: ISimpleType<number> = new CoreType<number, number, number>(\n    \"integer\",\n    TypeFlags.Integer,\n    (v) => isInteger(v)\n)\n```\n\ninteger是通过 **CoreType**创建的，其中有一个包含：create、instantiate、validate、isValidSnapshot等方法。\n\n执行create方法时，会调用 **instantiate** 方法创建所有子节点(ObjectNode)，每一种类型都会实现instantiate ，并且在validate方法中调用isValidSnapshot方法，\n\n```js\n    isValidSnapshot(value: C, context: IValidationContext): IValidationResult {\n        if (isPrimitive(value) && this.checker(value as any)) {\n            return typeCheckSuccess()\n        }\n        const typeName = this.name === \"Date\" ? \"Date or a unix milliseconds timestamp\" : this.name\n        return typeCheckFailure(context, value, `Value is not a ${typeName}`)\n    }\n```\n\n这里的checker就是上面传入的 **(v) => isInteger(v)**。\n\nmodel中会对实例添加拦截器(willChange)，在子节点的value发生改变前检查类型是否正确，其中typecheckInternal最终会调用到type.validate方法，最后调用isInteger方法\n\n```js\n    private willChange(chg: IObjectWillChange): IObjectWillChange | null {\n        const change = chg as IObjectWillChange & { newValue?: any }\n\n        const node = getStateTreeNode(change.object)\n        const subpath = change.name as string\n        node.assertWritable({ subpath })\n        const childType = (node.type as this).properties[subpath]\n        // only properties are typed, state are stored as-is references\n        if (childType) {\n            typecheckInternal(childType, change.newValue)\n\t\t\t\t\t\t// ....\n        }\n        return change\n    }\n```\n\n<iframe id=\"embed_dom\" name=\"embed_dom\" frameborder=\"0\" style=\"display:block;width:800px; height:245px;\" src=\"https://www.processon.com/embed/62a6961807912939b2287f8e\"></iframe>","createTime":1653301833072,"description":" 介绍\n\nMobx-state-tree（简称MST）是基于mobx的响应式状态管理工具，核心思想就是一个动态树，每个树由一个结构和一个状态组成，支持状态的序列化、反序列化、时间旅行等功能。\n\n 使用\njs\nnpm install mobx mobx-state-tree --save\n\n或\njs\nyarn add mobx mobx-state-tree\n\n\n","headerImg":"//file.vwood.xyz/2022/07/12/upload_xr6ll1e2a1s0dez3htsozhff6rcowu27.jpg","id":"fbf0032a-b12f-422e-b042-e2b2f76bd7d8","isDeleted":false,"likeCount":0,"name":"Mobx-state-tree介绍","operator":{"avatar":"https://static.vwood.xyz/blog/801656831571_.pic.jpg","description":"一个懒惰、躺平的程序员","github":"https://github.com/abelce","id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["Mobx-state-tree","MST"],"updateTime":1657589437211,"viewCount":276},"id":"fbf0032a-b12f-422e-b042-e2b2f76bd7d8","latestArticleList":[{"id":"f6ea6c70-76ba-40fa-9f5b-792afbf7fe8b","name":"记又拍云接入过程","tags":[],"description":"","content":""},{"id":"281b0b57-0e7e-4033-bcad-8b886535e127","name":"chrome文字定位与::target-text样式设置","tags":[],"description":"","content":""},{"id":"3b529a3e-13b9-4553-a454-13ce172dfedc","name":"bind、call、apply实现","tags":[],"description":"","content":""},{"id":"0257e379-878d-465a-b88a-03996f336035","name":"手写事件监听模块","tags":[],"description":"","content":""},{"id":"020be9da-928a-40c9-b25a-fda6e1c182b1","name":"css实现三角形","tags":[],"description":"","content":""}]},"initialMobxState":{"userStore":{"currentUser":null,"users":[],"token":"","qiniuToken":"","userCount":0,"productCount":0,"commentCount":0,"settingType":"products"},"productStore":{},"commentStore":{},"noteStore":{},"askStore":{},"stypeStore":{}},"__N_SSG":true}